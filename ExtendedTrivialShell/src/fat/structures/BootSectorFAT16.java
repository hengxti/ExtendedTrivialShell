package fat.structures;

import org.codehaus.preon.annotation.BoundNumber;
import org.codehaus.preon.annotation.BoundString;
import org.codehaus.preon.annotation.BoundString.Encoding;

public class BootSectorFAT16 extends BootSector {

	@BoundNumber(size = "1")
	private byte DrvNum;

	@BoundNumber(size = "1")
	private byte Reserved1;

	@BoundNumber(size = "1")
	private byte BootSig;

	@BoundNumber(size = "32")
	private int VolID;

	@BoundString(size = "11")
	private String VolLab;

	@BoundString(size = "8")
	private String FilSysType;
	
	@BoundString(size="448",encoding=Encoding.ISO_8859_1) 
	private byte[] bootLoaderInstructions;
	
	@BoundString(size="1") // 2byte
	private short bootLoadSignature;
	

	/**
	 * Int 0x13 drive number (e.g. 0x80). This field supports MS-DOS bootstrap
	 * and is set to the INT 0x13 drive number of the media (0x00 for floppy
	 * disks, 0x80 for hard disks). NOTE: This field is actually operating
	 * system specific.
	 * 
	 * @return the drvNum
	 */
	public byte getDrvNum() {
		return DrvNum;
	}

	/**
	 * 
	 * @param drvNum
	 *            the drvNum to set
	 */
	public void setDrvNum(byte drvNum) {
		DrvNum = drvNum;
	}

	/**
	 * Reserved (used by Windows NT). Code that formats FAT volumes should
	 * always set this byte to 0.
	 * 
	 * @return the reserved1
	 */
	public byte getReserved1() {
		return Reserved1;
	}

	/**
	 * @param reserved1
	 *            the reserved1 to set
	 */
	public void setReserved1(byte reserved1) {
		Reserved1 = reserved1;
	}

	/**
	 * Extended boot signature (0x29). This is a signature byte that indicates
	 * that the following three fields in the boot sector are present.
	 * 
	 * @return the bootSig
	 */
	public byte getBootSig() {
		return BootSig;
	}

	/**
	 * @param bootSig
	 *            the bootSig to set
	 */
	public void setBootSig(byte bootSig) {
		BootSig = bootSig;
	}

	/**
	 * Volume serial number. This field, together with BS_VolLab, supports
	 * volume tracking on removable media. These values allow FAT file system
	 * drivers to detect that the wrong disk is inserted in a removable drive.
	 * This ID is usually generated by simply combining the current date and
	 * time into a 32-bit value.
	 * 
	 * @return the volID
	 */
	public int getVolID() {
		return VolID;
	}

	/**
	 * @param volID
	 *            the volID to set
	 */
	public void setVolID(int volID) {
		VolID = volID;
	}

	/**
	 * Volume label. This field matches the 11-byte volume label recorded in the
	 * root directory. NOTE: FAT file system drivers should make sure that they
	 * update this field when the volume label file in the root directory has
	 * its name changed or created. The setting for this field when there is no
	 * volume label is the string “NO NAME ”.
	 * 
	 * @return the volLab
	 */
	public String getVolLab() {
		return VolLab;
	}

	/**
	 * @param volLab
	 *            the volLab to set
	 */
	public void setVolLab(String volLab) {
		VolLab = volLab;
	}

	/**
	 * One of the strings “FAT12 ”, “FAT16 ”, or “FAT ”. NOTE: Many people think
	 * that the string in this field has something to do with the determination
	 * of what type of FAT—FAT12, FAT16, or FAT32—that the volume has. This is
	 * not true. You will note from its name that this field is not actually
	 * part of the BPB. This string is informational only and is not used by
	 * Microsoft file system drivers to determine FAT type because it is
	 * frequently not set correctly or is not present. See the FAT Type
	 * Determination section of this document. This string should be set based
	 * on the FAT type though, because some non-Microsoft FAT file system
	 * drivers do look at it.
	 * 
	 * @return the filSysType
	 */
	public String getFilSysType() {
		return FilSysType;
	}

	/**
	 * @param filSysType
	 *            the filSysType to set
	 */
	public void setFilSysType(String filSysType) {
		FilSysType = filSysType;
	}

	/**
	 * @return the bootLoaderInstructions
	 */
	public byte[] getBootLoaderInstructions() {
		return bootLoaderInstructions;
	}

	/**
	 * @param bootLoaderInstructions the bootLoaderInstructions to set
	 */
	public void setBootLoaderInstructions(byte[] bootLoaderInstructions) {
		this.bootLoaderInstructions = bootLoaderInstructions;
	}

	/**
	 * @return the bootLoadSignature
	 */
	public short getBootLoadSignature() {
		return bootLoadSignature;
	}

	/**
	 * @param bootLoadSignature the bootLoadSignature to set
	 */
	public void setBootLoadSignature(short bootLoadSignature) {
		this.bootLoadSignature = bootLoadSignature;
	}
	
	

}
